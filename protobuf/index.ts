import fs from "fs";
import { ProtobufHandler } from "./ProtobufHandler";
import { SendAnalyticEventReq } from "./protos/SendAnalyticEventReq";
import { ServerClientMessageHeaderMap } from "./protos/ServerClientMessageHeader";
import { SendAnalyticEventResp } from "./protos/SendAnalyticEventResp";
import { ClientServerMessageHeaderMap } from "./protos/ClientServerMessageHeader";
import { SubscribeReq } from "./protos/SubscribeReq";
import { Leaderboard_Resp } from "./protos/Leaderboard_Resp";
import { CMSField } from "./interfaces/CMSField";
import { SharplaGameCmdHeader } from "./protos/audits/SharplaGameCmdHeader";
import { RhythmGameEnded_SharplaAudit } from "./protos/audits/RhythmGameEnded_SharplaAudit";
import { ExecuteSharplaAuditReq } from "./protos/ExecuteSharplaAuditReq";
import { GetCMSMetaInfoResp } from "./protos/GetCMSMetaInfoResp";

(async () => {
  /*const buf = Buffer.from([
    0x0a, 0xa9, 0x02, 0x08, 0x0c, 0x12, 0xfb, 0x01, 0x08, 0x61, 0x18, 0x04,
    0x2a, 0x12, 0x00, 0x02, 0x08, 0x01, 0x04, 0x08, 0x02, 0x10, 0x04, 0x02,
    0x08, 0x03, 0x02, 0x08, 0x04, 0x02, 0x08, 0x06, 0x40, 0x02, 0x4a, 0xc8,
    0x01, 0x22, 0x08, 0x00, 0x12, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1a, 0x12, 0x00, 0x02, 0x08, 0x01, 0x04, 0x08,
    0x02, 0x10, 0x04, 0x02, 0x08, 0x03, 0x02, 0x08, 0x04, 0x02, 0x08, 0x06,
    0x20, 0x08, 0x01, 0x12, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1a, 0x10, 0x00, 0x02, 0x08, 0x01, 0x02, 0x08, 0x02,
    0x02, 0x08, 0x03, 0x02, 0x08, 0x04, 0x02, 0x08, 0x06, 0x20, 0x08, 0x02,
    0x12, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1a, 0x10, 0x00, 0x02, 0x08, 0x01, 0x02, 0x08, 0x02, 0x02, 0x08, 0x03,
    0x02, 0x08, 0x04, 0x02, 0x08, 0x06, 0x20, 0x08, 0x03, 0x12, 0x0a, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x00,
    0x02, 0x08, 0x01, 0x02, 0x08, 0x02, 0x02, 0x08, 0x03, 0x02, 0x08, 0x04,
    0x02, 0x08, 0x06, 0x20, 0x08, 0x04, 0x12, 0x0a, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x00, 0x02, 0x08, 0x01,
    0x02, 0x08, 0x02, 0x02, 0x08, 0x03, 0x02, 0x08, 0x04, 0x02, 0x08, 0x06,
    0x20, 0x08, 0x05, 0x12, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1a, 0x10, 0x00, 0x02, 0x08, 0x01, 0x02, 0x08, 0x02,
    0x02, 0x08, 0x03, 0x02, 0x08, 0x04, 0x02, 0x08, 0x06, 0x58, 0x01, 0x60,
    0x01, 0x6a, 0x0b, 0x09, 0xbc, 0x79, 0xaa, 0x43, 0x6e, 0x86, 0x5b, 0x3f,
    0x10, 0x7e, 0x78, 0x01, 0xc2, 0x01, 0x00, 0x18, 0xf5, 0x89, 0xc5, 0x92,
    0x95, 0x33, 0x22, 0x20, 0x08, 0x04, 0x12, 0x18, 0x08, 0x83, 0x8c, 0x04,
    0x10, 0xf4, 0x3a, 0x30, 0x92, 0x02, 0x38, 0xa2, 0x02, 0x40, 0x61, 0x49,
    0x00, 0x00, 0x00, 0x80, 0xc6, 0xd4, 0x44, 0x41, 0x18, 0x91, 0xb3, 0x01,
  ]);

  const proto: Map<number, CMSField> = new Map([
    [
      1,
      {
        name: "audit",
        type: "group",
        fields: new Map([
          [
            1,
            {
              name: "type",
              type: "enum",
              enums: {
                12: RhythmGameEnded_SharplaAudit,
              },
            },
          ],
          [3, { name: "timestampMsecs", type: "varint" }],
          [
            4,
            {
              name: "cmdHeader",
              type: "group",
              fields: new Map([
                [
                  1,
                  {
                    name: "type",
                    type: "enum",
                    enums: {
                      4: SharplaGameCmdHeader,
                    },
                  },
                ],
                [3, { name: "saveCount", type: "varint" }],
              ]),
            },
          ],
        ]),
      },
    ],
  ]);*/

  const handler = new ProtobufHandler("READ", fs.readFileSync("./1"));

  const packetLength = handler.readIntBE();
  const headerLength = handler.readIntBE();
  const payloadLength = packetLength - 4 - headerLength;
  const header = new ProtobufHandler("READ", handler.slice(headerLength));
  const payload = new ProtobufHandler("READ", handler.slice(payloadLength));

  header.process();

  console.log(header);

  const h = header.parseProto(ServerClientMessageHeaderMap);

  if (h.compressed) {
    await payload.decompress();
  }

  console.log(h);

  payload.process();

  console.log("payload", payload);

  const p = payload.parseProto(GetCMSMetaInfoResp);

  console.log(
    JSON.stringify(p, (_, v) => (typeof v === "bigint" ? v.toString() : v), 2)
  );
})();
